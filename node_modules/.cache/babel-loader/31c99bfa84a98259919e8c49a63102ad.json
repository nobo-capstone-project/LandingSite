{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nrequire('@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css');\n\nvar _react = require('react');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _mapboxGlGeocoder = require('@mapbox/mapbox-gl-geocoder');\n\nvar _mapboxGlGeocoder2 = _interopRequireDefault(_mapboxGlGeocoder);\n\nvar _reactMapGl = require('react-map-gl');\n\nvar _viewportMercatorProject = require('viewport-mercator-project');\n\nvar _viewportMercatorProject2 = _interopRequireDefault(_viewportMercatorProject);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar VALID_POSITIONS = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\n\nfunction fitBounds(bounds, viewport) {\n  return new _viewportMercatorProject2.default(viewport).fitBounds(bounds);\n}\n\nfunction getAccessToken() {\n  var accessToken = null;\n\n  if (typeof window !== 'undefined' && window.location) {\n    var match = window.location.search.match(/access_token=([^&\\/]*)/);\n    accessToken = match && match[1];\n  }\n\n  if (!accessToken && typeof process !== 'undefined') {\n    // Note: This depends on bundler plugins (e.g. webpack) inmporting environment correctly\n    accessToken = accessToken || process.env.MapboxAccessToken; // eslint-disable-line\n  }\n\n  return accessToken || null;\n}\n\nvar Geocoder = function (_Component) {\n  _inherits(Geocoder, _Component);\n\n  function Geocoder() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Geocoder);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Geocoder.__proto__ || Object.getPrototypeOf(Geocoder)).call.apply(_ref, [this].concat(args))), _this), _this.handleClear = function () {\n      _this.props.onClear();\n    }, _this.handleLoading = function (event) {\n      _this.props.onLoading(event);\n    }, _this.handleResults = function (event) {\n      _this.props.onResults(event);\n    }, _this.handleResult = function (event) {\n      var result = event.result;\n      var _this$props = _this.props,\n          mapRef = _this$props.mapRef,\n          onViewportChange = _this$props.onViewportChange,\n          onResult = _this$props.onResult;\n      var id = result.id,\n          bbox = result.bbox,\n          center = result.center;\n\n      var _center = _slicedToArray(center, 2),\n          longitude = _center[0],\n          latitude = _center[1];\n\n      var bboxExceptions = {\n        'country.3148': {\n          name: 'France',\n          bbox: [[-4.59235, 41.380007], [9.560016, 51.148506]]\n        },\n        'country.3145': {\n          name: 'United States',\n          bbox: [[-171.791111, 18.91619], [-66.96466, 71.357764]]\n        },\n        'country.330': {\n          name: 'Russia',\n          bbox: [[19.66064, 41.151416], [190.10042, 81.2504]]\n        },\n        'country.3179': {\n          name: 'Canada',\n          bbox: [[-140.99778, 41.675105], [-52.648099, 83.23324]]\n        }\n      };\n      var width = mapRef.current.props.width;\n      var height = mapRef.current.props.height;\n      var zoom = _this.geocoder.options.zoom;\n\n      if (!bboxExceptions[id] && bbox) {\n        zoom = fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]], {\n          width: width,\n          height: height\n        }).zoom;\n      } else if (bboxExceptions[id]) {\n        zoom = fitBounds(bboxExceptions[id].bbox, {\n          width: width,\n          height: height\n        }).zoom;\n      }\n\n      if (_this.geocoder.options.flyTo) {\n        onViewportChange({\n          longitude: longitude,\n          latitude: latitude,\n          zoom: zoom,\n          transitionInterpolator: new _reactMapGl.FlyToInterpolator(),\n          transitionDuration: 3000\n        });\n      } else {\n        onViewportChange({\n          longitude: longitude,\n          latitude: latitude,\n          zoom: zoom\n        });\n      }\n\n      onResult(event);\n    }, _this.handleError = function (event) {\n      _this.props.onError(event);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Geocoder, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // mapRef is undefined on initial page load, so force an update to initialize geocoder\n      this.forceUpdate();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.geocoder) {\n        this.geocoder = null;\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (this.geocoder !== undefined) {\n        return;\n      }\n\n      var _props = this.props,\n          mapRef = _props.mapRef,\n          mapboxApiAccessToken = _props.mapboxApiAccessToken,\n          zoom = _props.zoom,\n          flyTo = _props.flyTo,\n          placeholder = _props.placeholder,\n          proximity = _props.proximity,\n          trackProximity = _props.trackProximity,\n          bbox = _props.bbox,\n          types = _props.types,\n          country = _props.country,\n          minLength = _props.minLength,\n          limit = _props.limit,\n          language = _props.language,\n          filter = _props.filter,\n          localGeocoder = _props.localGeocoder,\n          options = _props.options,\n          onInit = _props.onInit,\n          position = _props.position;\n      this.geocoder = new _mapboxGlGeocoder2.default(_extends({\n        accessToken: mapboxApiAccessToken,\n        zoom: zoom,\n        flyTo: flyTo,\n        placeholder: placeholder,\n        proximity: proximity,\n        trackProximity: trackProximity,\n        bbox: bbox,\n        types: types,\n        country: country,\n        minLength: minLength,\n        limit: limit,\n        language: language,\n        filter: filter,\n        localGeocoder: localGeocoder\n      }, options));\n      this.geocoder.on('clear', this.handleClear);\n      this.geocoder.on('loading', this.handleLoading);\n      this.geocoder.on('results', this.handleResults);\n      this.geocoder.on('result', this.handleResult);\n      this.geocoder.on('error', this.handleError);\n      mapRef.current.getMap().addControl(this.geocoder, VALID_POSITIONS.find(function (_position) {\n        return position === _position;\n      }));\n      onInit(this.geocoder);\n    }\n  }, {\n    key: 'getGeocoder',\n    value: function getGeocoder() {\n      return this.geocoder;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return Geocoder;\n}(_react.Component);\n\nGeocoder.propTypes = {\n  mapRef: _propTypes2.default.object.isRequired,\n  onViewportChange: _propTypes2.default.func.isRequired,\n  mapboxApiAccessToken: _propTypes2.default.string,\n  zoom: _propTypes2.default.number,\n  flyTo: _propTypes2.default.bool,\n  placeholder: _propTypes2.default.string,\n  proximity: _propTypes2.default.object,\n  trackProximity: _propTypes2.default.bool,\n  bbox: _propTypes2.default.array,\n  types: _propTypes2.default.string,\n  country: _propTypes2.default.string,\n  minLength: _propTypes2.default.number,\n  limit: _propTypes2.default.number,\n  language: _propTypes2.default.string,\n  filter: _propTypes2.default.func,\n  localGeocoder: _propTypes2.default.func,\n  position: _propTypes2.default.oneOf(VALID_POSITIONS),\n  onInit: _propTypes2.default.func,\n  onClear: _propTypes2.default.func,\n  onLoading: _propTypes2.default.func,\n  onResults: _propTypes2.default.func,\n  onResult: _propTypes2.default.func,\n  onError: _propTypes2.default.func,\n  options: _propTypes2.default.object // deprecated and will be removed in v2\n\n};\nGeocoder.defaultProps = {\n  mapboxApiAccessToken: getAccessToken(),\n  zoom: 16,\n  flyTo: true,\n  placeholder: 'Search',\n  trackProximity: false,\n  minLength: 2,\n  limit: 5,\n  position: 'top-right',\n  onInit: function onInit() {},\n  onClear: function onClear() {},\n  onLoading: function onLoading() {},\n  onResults: function onResults() {},\n  onResult: function onResult() {},\n  onError: function onError() {}\n};\nexports.default = Geocoder;","map":null,"metadata":{},"sourceType":"script"}