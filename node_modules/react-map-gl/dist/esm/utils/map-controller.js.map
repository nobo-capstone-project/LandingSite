{"version":3,"sources":["../../../src/utils/map-controller.js"],"names":["MapState","LinearInterpolator","TransitionManager","TRANSITION_EVENTS","NO_TRANSITION_PROPS","transitionDuration","LINEAR_TRANSITION_PROPS","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","ZOOM_ACCEL","EVENT_TYPES","WHEEL","PAN","PINCH","DOUBLE_TAP","KEYBOARD","MapController","isDragging","event","mapState","getMapState","type","_onPanStart","_onPan","_onPanEnd","_onPinchStart","_onPinch","_onPinchEnd","_onDoubleTap","_onWheel","_onKeyDown","newState","Object","assign","_state","onStateChange","offsetCenter","x","y","srcEvent","Boolean","metaKey","altKey","ctrlKey","shiftKey","newMapState","extraProps","extraState","oldViewport","getViewportProps","newViewport","viewStateChanged","keys","some","key","onViewportChange","setState","getInteractiveState","overrides","mapStateProps","options","eventManager","isInteractive","scrollZoom","dragPan","dragRotate","doubleClickZoom","touchZoom","touchRotate","keyboard","height","updateViewport","_transitionManager","processViewportChange","_events","toggleEvents","events","eventNames","enabled","forEach","eventName","on","handleEvent","off","pos","getCenter","panStart","rotateStart","isFunctionKeyPressed","rightButton","_onPanRotate","_onPanMove","panEnd","rotateEnd","isPanning","isRotating","pan","deltaX","deltaY","centerY","startY","width","deltaScaleX","deltaScaleY","Math","abs","min","max","rotate","preventDefault","delta","scale","exp","zoom","isZooming","zoomStart","startPinchRotation","rotation","zoomEnd","isZoomOut","around","funcKey","keyCode","bearing","startPos","pitch"],"mappings":"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","sourcesContent":["// @flow\n// Copyright (c) 2015 Uber Technologies, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport MapState from './map-state';\nimport {LinearInterpolator} from './transition';\nimport TransitionManager, {TRANSITION_EVENTS} from './transition-manager';\n\nimport type {MjolnirEvent} from 'mjolnir.js';\n\nconst NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n// EVENT HANDLING PARAMETERS\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nconst ZOOM_ACCEL = 0.01;\n\nconst EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\n/**\n * @classdesc\n * A class that handles events and updates mercator style viewport parameters\n */\nexport default class MapController {\n\n  events: Array<string> = [];\n  mapState: MapState;\n  onViewportChange: Function;\n  onStateChange: Function;\n  mapStateProps: any;\n  eventManager: any;\n  scrollZoom: boolean = true;\n  dragPan: boolean = true;\n  dragRotate: boolean = true;\n  doubleClickZoom: boolean = true;\n  touchZoom: boolean = true;\n  touchRotate: boolean = false;\n  keyboard: boolean = true;\n\n  _state: any = {\n    isDragging: false\n  };\n  _events: any = {};\n  _transitionManager: TransitionManager = new TransitionManager();\n\n  /**\n   * Callback for events\n   * @param {hammer.Event} event\n   */\n  handleEvent = (event: MjolnirEvent) => {\n    this.mapState = this.getMapState();\n\n    switch (event.type) {\n    case 'panstart':\n      return this._onPanStart(event);\n    case 'panmove':\n      return this._onPan(event);\n    case 'panend':\n      return this._onPanEnd(event);\n    case 'pinchstart':\n      return this._onPinchStart(event);\n    case 'pinchmove':\n      return this._onPinch(event);\n    case 'pinchend':\n      return this._onPinchEnd(event);\n    case 'doubletap':\n      return this._onDoubleTap(event);\n    case 'wheel':\n      return this._onWheel(event);\n    case 'keydown':\n      return this._onKeyDown(event);\n    default:\n      return false;\n    }\n  }\n\n  /* Event utils */\n  // Event object: http://hammerjs.github.io/api/#event-object\n  getCenter(event: MjolnirEvent): Array<number> {\n    const {offsetCenter: {x, y}} = event;\n    return [x, y];\n  }\n\n  isFunctionKeyPressed(event: MjolnirEvent): boolean {\n    const {srcEvent} = event;\n    return Boolean(srcEvent.metaKey || srcEvent.altKey ||\n      srcEvent.ctrlKey || srcEvent.shiftKey);\n  }\n\n  setState = (newState: any) => {\n    Object.assign(this._state, newState);\n    if (this.onStateChange) {\n      this.onStateChange(this._state);\n    }\n  }\n\n  /* Callback util */\n  // formats map state and invokes callback function\n  updateViewport(newMapState: MapState, extraProps: any = {}, extraState: any = {}) {\n    const oldViewport = this.mapState ? this.mapState.getViewportProps() : {};\n    const newViewport = Object.assign({}, newMapState.getViewportProps(), extraProps);\n\n    const viewStateChanged =\n      Object.keys(newViewport).some(key => oldViewport[key] !== newViewport[key]);\n\n    // viewState has changed\n    if (viewStateChanged) {\n      this.onViewportChange(newViewport, extraState, oldViewport);\n    }\n\n    this.setState(Object.assign({}, newMapState.getInteractiveState(), extraState));\n  }\n\n  getMapState(overrides?: any): MapState {\n    return new MapState(Object.assign({}, this.mapStateProps, this._state, overrides));\n  }\n\n  /**\n   * Extract interactivity options\n   */\n  setOptions(options: any) {\n    const {\n      onViewportChange,\n      onStateChange,\n      eventManager = this.eventManager,\n\n      isInteractive = true,\n      scrollZoom = this.scrollZoom,\n      dragPan = this.dragPan,\n      dragRotate = this.dragRotate,\n      doubleClickZoom = this.doubleClickZoom,\n      touchZoom = this.touchZoom,\n      touchRotate = this.touchRotate,\n      keyboard = this.keyboard\n    } = options;\n\n    this.onViewportChange = onViewportChange;\n    this.onStateChange = onStateChange;\n\n    if (!this.mapStateProps || this.mapStateProps.height !== options.height) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(new MapState(options));\n    }\n\n    this.mapStateProps = options;\n    // Update transition\n    this._transitionManager.processViewportChange(Object.assign({}, options, {\n      onStateChange: this.setState\n    }));\n\n    if (this.eventManager !== eventManager) {\n      // EventManager has changed\n      this.eventManager = eventManager;\n      this._events = {};\n      this.toggleEvents(this.events, true);\n    }\n\n    // Register/unregister events\n    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n    this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n    this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n\n    // Interaction toggles\n    this.scrollZoom = scrollZoom;\n    this.dragPan = dragPan;\n    this.dragRotate = dragRotate;\n    this.doubleClickZoom = doubleClickZoom;\n    this.touchZoom = touchZoom;\n    this.touchRotate = touchRotate;\n    this.keyboard = keyboard;\n  }\n\n  toggleEvents(eventNames: Array<string>, enabled: boolean) {\n    if (this.eventManager) {\n      eventNames.forEach(eventName => {\n        if (this._events[eventName] !== enabled) {\n          this._events[eventName] = enabled;\n          if (enabled) {\n            this.eventManager.on(eventName, this.handleEvent);\n          } else {\n            this.eventManager.off(eventName, this.handleEvent);\n          }\n        }\n      });\n    }\n  }\n\n  /* Event handlers */\n  // Default handler for the `panstart` event.\n  _onPanStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.panStart({pos}).rotateStart({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `panmove` event.\n  _onPan(event: MjolnirEvent) {\n    return this.isFunctionKeyPressed(event) || event.rightButton ?\n      this._onPanRotate(event) : this._onPanMove(event);\n  }\n\n  // Default handler for the `panend` event.\n  _onPanEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.panEnd().rotateEnd();\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for panning to move.\n  // Called by `_onPan` when panning without function key pressed.\n  _onPanMove(event: MjolnirEvent) {\n    if (!this.dragPan) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.pan({pos});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isPanning: true});\n    return true;\n  }\n\n  // Default handler for panning to rotate.\n  // Called by `_onPan` when panning with function key pressed.\n  _onPanRotate(event: MjolnirEvent) {\n    if (!this.dragRotate) {\n      return false;\n    }\n\n    const {deltaX, deltaY} = event;\n    const [, centerY] = this.getCenter(event);\n    const startY = centerY - deltaY;\n    const {width, height} = this.mapState.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    deltaScaleY = Math.min(1, Math.max(-1, deltaScaleY));\n\n    const newMapState = this.mapState.rotate({deltaScaleX, deltaScaleY});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isRotating: true});\n    return true;\n  }\n\n  // Default handler for the `wheel` event.\n  _onWheel(event: MjolnirEvent) {\n    if (!this.scrollZoom) {\n      return false;\n    }\n\n    event.preventDefault();\n\n    const pos = this.getCenter(event);\n    const {delta} = event;\n\n    // Map wheel delta to relative scale\n    let scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n    if (delta < 0 && scale !== 0) {\n      scale = 1 / scale;\n    }\n\n    const newMapState = this.mapState.zoom({pos, scale});\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isZooming: true});\n    // This is a one-off event, state should not persist\n    this.setState({isZooming: false});\n    return true;\n  }\n\n  // Default handler for the `pinchstart` event.\n  _onPinchStart(event: MjolnirEvent) {\n    const pos = this.getCenter(event);\n    const newMapState = this.mapState.zoomStart({pos}).rotateStart({pos});\n    // hack - hammer's `rotation` field doesn't seem to produce the correct angle\n    this._state.startPinchRotation = event.rotation;\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {isDragging: true});\n    return true;\n  }\n\n  // Default handler for the `pinch` event.\n  _onPinch(event: MjolnirEvent) {\n    if (!this.touchZoom && !this.touchRotate) {\n      return false;\n    }\n\n    let newMapState = this.mapState;\n    if (this.touchZoom) {\n      const {scale} = event;\n      const pos = this.getCenter(event);\n      newMapState = newMapState.zoom({pos, scale});\n    }\n    if (this.touchRotate) {\n      const {rotation} = event;\n      const {startPinchRotation} = this._state;\n      newMapState = newMapState.rotate({deltaScaleX: -(rotation - startPinchRotation) / 180});\n    }\n\n    this.updateViewport(newMapState, NO_TRANSITION_PROPS, {\n      isDragging: true,\n      isPanning: this.touchZoom,\n      isZooming: this.touchZoom,\n      isRotating: this.touchRotate\n    });\n    return true;\n  }\n\n  // Default handler for the `pinchend` event.\n  _onPinchEnd(event: MjolnirEvent) {\n    const newMapState = this.mapState.zoomEnd().rotateEnd();\n    this._state.startPinchRotation = 0;\n    this.updateViewport(newMapState, null, {\n      isDragging: false,\n      isPanning: false,\n      isZooming: false,\n      isRotating: false\n    });\n    return true;\n  }\n\n  // Default handler for the `doubletap` event.\n  _onDoubleTap(event: MjolnirEvent) {\n    if (!this.doubleClickZoom) {\n      return false;\n    }\n    const pos = this.getCenter(event);\n    const isZoomOut = this.isFunctionKeyPressed(event);\n\n    const newMapState = this.mapState.zoom({pos, scale: isZoomOut ? 0.5 : 2});\n    this.updateViewport(newMapState, Object.assign({}, LINEAR_TRANSITION_PROPS, {\n      transitionInterpolator: new LinearInterpolator({around: pos})\n    }));\n    return true;\n  }\n\n  /* eslint-disable complexity */\n  // Default handler for the `keydown` event\n  _onKeyDown(event: MjolnirEvent) {\n    if (!this.keyboard) {\n      return false;\n    }\n    const funcKey = this.isFunctionKeyPressed(event);\n    const {mapStateProps} = this;\n    let newMapState;\n\n    switch (event.srcEvent.keyCode) {\n    case 189: // -\n      if (funcKey) {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom - 2});\n      } else {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom - 1});\n      }\n      break;\n    case 187: // +\n      if (funcKey) {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom + 2});\n      } else {\n        newMapState = this.getMapState({zoom: mapStateProps.zoom + 1});\n      }\n      break;\n    case 37: // left\n      if (funcKey) {\n        newMapState = this.getMapState({bearing: mapStateProps.bearing - 15});\n      } else {\n        newMapState = this.mapState.pan({pos: [100, 0], startPos: [0, 0]});\n      }\n      break;\n    case 39: // right\n      if (funcKey) {\n        newMapState = this.getMapState({bearing: mapStateProps.bearing + 15});\n      } else {\n        newMapState = this.mapState.pan({pos: [-100, 0], startPos: [0, 0]});\n      }\n      break;\n    case 38: // up\n      if (funcKey) {\n        newMapState = this.getMapState({pitch: mapStateProps.pitch + 10});\n      } else {\n        newMapState = this.mapState.pan({pos: [0, 100], startPos: [0, 0]});\n      }\n      break;\n    case 40: // down\n      if (funcKey) {\n        newMapState = this.getMapState({pitch: mapStateProps.pitch - 10});\n      } else {\n        newMapState = this.mapState.pan({pos: [0, -100], startPos: [0, 0]});\n      }\n      break;\n    default:\n      return false;\n    }\n    return this.updateViewport(newMapState, LINEAR_TRANSITION_PROPS);\n  }\n  /* eslint-enable complexity */\n}\n"],"file":"map-controller.js"}